/******************************************************************************/
/*
Improved Collision Detection with angular speed
*/
/******************************************************************************/

#pragma kernel Init
#pragma kernel Step

#include "../../CjLib/Shader/Math/Math.cginc"
#include "../../CjLib/Shader/Noise/Noise.cginc"
#include "../../CjLib/Shader/Physics/Physics.cginc"

#include "ParticleStruct.cginc"
#include "GridStruct.cginc"
RWStructuredBuffer<Particle> particleBuffer;
RWStructuredBuffer<Grid> gridBuffer;
float2 scale;    // (min, max)
float damping;
float4 speed;    // (min linear, max linear, min angular, max angular)
float3 gridLowCorner;
float3 gridHighCorner;
// float4 lifetime; // No need of lifetime this time

int numParticles;

[numthreads(1, 1, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
  // TODO: init particles at random locations INSIDE the bound
}

float2 time; // (current, delta)
float3 dynamics; // (gravity, restitution, friction)
float4 aSphere[1];
float4 aSphereVel[1];
float4 plane[6]; // We have 6 planes now

[numthreads(1, 1, 1)]
void Step(uint3 id : SV_DispatchThreadID)
{

  // read out
  float r = 0.5f * particleBuffer[id.x].scale;
  float3 pos = particleBuffer[id.x].position;
  float3 vel = particleBuffer[id.x].linearVelocity;
  float4 ang = particleBuffer[id.x].angularVelocity;
  // gravity
  vel.y -= dynamics.x * time.y;
//-------------------------------------- TODO PART --------------------------------
  CollisionResult res;

  // sphere
    float3 velRel = vel - aSphereVel[0].xyz;
    res = sphereVsSphereAngular(float4(pos, r), aSphere[0], velRel, ang, dynamics.y, dynamics.z);
    pos = res.position;
    vel = res.velocity + aSphereVel[0].xyz;
	ang = res.angularVelocity;

  // TODO: collision with all planes


	// TODO: collision with surrounding grids

	// Integrate
	pos += vel * time.y;
//--------------------------------------- END OF TODO PART --------------------
  // angular speed damping(damp the angle)
  float4 dampedAngularSpeed = quat_damp(ang,damping); // Do not direct multiply!
  float4 q = quat_pow(dampedAngularSpeed, time.y);
  particleBuffer[id.x].rotation = quat_concat(q, particleBuffer[id.x].rotation);

  // write back
  particleBuffer[id.x].position = pos;
  particleBuffer[id.x].linearVelocity = vel;
  particleBuffer[id.x].angularVelocity = dampedAngularSpeed;
}
