/******************************************************************************/
/*
Improved Collision Detection with angular speed
*/
/******************************************************************************/

#pragma kernel Init
#pragma kernel Step

#include "../../CjLib/Shader/Math/Math.cginc"
#include "../../CjLib/Shader/Noise/Noise.cginc"
#include "../../CjLib/Shader/Physics/Physics.cginc"

#include "ParticleStruct.cginc"
#include "GridStruct.cginc"
RWStructuredBuffer<Particle> particleBuffer;
RWStructuredBuffer<Grid> gridBuffer;
float2 scale;    // (min, max)
float damping;
float4 speed;    // (min linear, max linear, min angular, max angular)
float3 gridLowCorner;
float3 gridHighCorner;
// float4 lifetime; // No need of lifetime this time

int numParticles;

[numthreads(1, 1, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
  // TODO: init particles at random locations INSIDE the bound
	float3 seed = id.x;
	seed = rand_vec(seed);

  // Particle Position/Orientation/Scale
	float3 randpos;
	randpos.x = rand_range(seed.x,gridLowCorner.x + 0.1,gridHighCorner.x - 0.1);
	randpos.y = rand_range(seed.y,gridLowCorner.y + 0.1,gridHighCorner.y - 0.1);
	randpos.z = rand_range(seed.z,gridLowCorner.z + 0.1,gridHighCorner.z - 0.1);
	particleBuffer[id.x].position = randpos;

	float3 rotationAxis = rand_uvec(seed);
	seed = rand_vec(seed);
	float rotationAngle = rand(seed.x) * kPi;
	seed = rand_vec(seed);
	particleBuffer[id.x].rotation = quat_axis_angle(rotationAxis, rotationAngle);

	particleBuffer[id.x].scale = rand_range(seed.x, scale.x, scale.y);
	seed = rand_vec(seed);
	// Linear Velocity
	float3 linearDirection = normalize(rand_vec(seed));
	seed = rand_vec(seed);
	float linearSpeed = rand_range(seed.x, speed.x, speed.y);
	seed = rand_vec(seed);
	particleBuffer[id.x].linearVelocity = linearSpeed * linearDirection;

  // Angular Velocity
    particleBuffer[id.x].damping = damping;
	float3 angularDirection = rand_uvec(seed);
	seed = rand_vec(seed);
	float angularSpeed = rand_range(seed.x, speed.z, speed.w);
	seed = rand_vec(seed);
	particleBuffer[id.x].angularVelocity = quat_axis_angle(angularDirection, angularSpeed);

	float t = rand_range(seed.x,0,1.0);
	particleBuffer[id.x].color = float4(hsv2rgb(float3(t, 1.0, 1.0)), 1.0);
}

float2 time; // (current, delta)
float3 dynamics; // (gravity, restitution, friction)
float4 aSphere[1];
float4 aSphereVel[1];
float4 plane[6]; // We have 6 planes now

[numthreads(1, 1, 1)]
void Step(uint3 id : SV_DispatchThreadID)
{

  // read out
  float r = 0.5f * particleBuffer[id.x].scale;
  float3 pos = particleBuffer[id.x].position;
  float3 vel = particleBuffer[id.x].linearVelocity;
  float4 ang = particleBuffer[id.x].angularVelocity;
  // gravity
  vel.y -= dynamics.x * time.y;
//-------------------------------------- TODO PART --------------------------------
  CollisionResult res;

  float3 delta_vel = float3(0, 0, 0);
  float3 origin_vel = vel;

	// sphere
    float3 velRel = vel - aSphereVel[0].xyz;
    res = sphereVsSphere(float4(pos, r), aSphere[0], velRel, dynamics.y, dynamics.z);
    pos = res.position;
	delta_vel += res.velocity + aSphereVel[0].xyz - vel;
    //vel = res.velocity + aSphereVel[0].xyz;
	
	//ang = res.angularVelocity;

	// collision with all planes
	for (int i = 0; i < 6; i++) {
		res = sphereVsPlane(float4(pos, r), plane[i], vel, dynamics.y, dynamics.z);
		pos = res.position;
		delta_vel += res.velocity - vel;
		//vel = res.velocity;
		//ang = res.angularVelocity;
	}

	// TODO: collision with surrounding grids
	uint grid_x, grid_y, grid_z, grid_idx, coll_idx;

	// traverse its 26 neighbours and the grid contains itself
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			for (int k = 0; k < 3; k++) {

				// get grid index
				grid_x = particleBuffer[id.x].gridIndex.x - 1 + i;
				grid_y = particleBuffer[id.x].gridIndex.y - 1 + j;
				grid_z = particleBuffer[id.x].gridIndex.z - 1 + k ;

				/*if (grid_x >= 64 || grid_y >= 64 || grid_z >= 64 || grid_x < 0 || grid_y < 0 || grid_z < 0)
					continue;*/

				if (grid_x >= 64)
					grid_x -= 1;
				if (grid_y >= 64)
					grid_y -= 1;
				if (grid_z >= 64)
					grid_z -= 1;
				if (grid_x < 0)
					grid_x += 1;
				if (grid_y < 0)
					grid_y += 1;
				if (grid_z < 0)
					grid_z += 1;


				grid_idx = 64 * 64 * grid_x + 64 * grid_y + grid_z;

				for (int p = 0; p < 4; p++) {
					
					coll_idx = gridBuffer[grid_idx].PbIndex[p];

					if (coll_idx == id.x) continue; // if collide with itself, continue
					if (coll_idx == numParticles) break; // no more particle in the grid

					float3 velRel = vel - particleBuffer[coll_idx].linearVelocity;
					//if (length(velRel) < 0.3)
					//	velRel = (0, 0, 0);
					res = sphereVsSphere(float4(pos, r), float4(particleBuffer[coll_idx].position, 0.5f * particleBuffer[coll_idx].scale), velRel, dynamics.y, dynamics.z);
					// ????
					pos = res.position;
					delta_vel += res.velocity + particleBuffer[coll_idx].linearVelocity - vel;
					//vel = res.velocity + particleBuffer[coll_idx].linearVelocity;
					
					//vel = particleBuffer[coll_idx].linearVelocity;
					//vel /= 2.0f;
					//ang = res.angularVelocity;

				}

			}
		}
	}
	
	vel = origin_vel + delta_vel;

	// Integrate
	pos += vel * time.y;
	if (pos.x >= gridHighCorner.x) {
		pos.x = gridHighCorner.x - 0.2f; // Right
		//vel += 0.2f *
	}

	if (pos.y >= gridHighCorner.y) {
		pos.y = gridHighCorner.y - 0.2f;
	}

	if (pos.z >= gridHighCorner.z) {
		pos.z = gridHighCorner.z - 0.2f;
	}

	if (pos.x <= gridLowCorner.x) {
		pos.x = gridLowCorner.x + 0.2f;
	}

	if (pos.y <= gridLowCorner.y) {
		pos.y = gridLowCorner.y + 0.2f;
	}

	if (pos.z <= gridLowCorner.z) {
		pos.z = gridLowCorner.z + 0.2f;
	}

//--------------------------------------- END OF TODO PART --------------------
  // angular speed damping(damp the angle)
  float4 dampedAngularSpeed = quat_damp(ang,damping); // Do not direct multiply!
  float4 q = quat_pow(dampedAngularSpeed, time.y);
  particleBuffer[id.x].rotation = quat_concat(q, particleBuffer[id.x].rotation);

  // write back
  particleBuffer[id.x].position = pos;
  particleBuffer[id.x].linearVelocity = vel;
  particleBuffer[id.x].angularVelocity = dampedAngularSpeed;
}
